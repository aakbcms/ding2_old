<?php

/**
 * @file
 * Ding SEO module file.
 */

use Drupal\xautoload\Adapter\LocalDirectoryAdapter;
use DingSEO\TingObjectSchemaWrapperInterface;
use Ting\TingObjectInterface;

include_once 'ding_seo.features.inc';

define('DING_SEO_DEFAULT_MAXIMUM_SITEMAP_LINKS', 50000);

/**
 * Implements hook_menu().
 */
function ding_seo_menu() {
  $items = [];

  $items['admin/config/ding/ding_seo'] = [
    'title' => 'Ding SEO',
    'description' => 'Configure the SEO module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_seo_admin_settings'],
    'access arguments' => ['configure seo settings'],
    'file' => 'ding_seo.admin.inc',
  ];

  $items['ding_seo/jsonld/ting_object/%'] = [
    'title' => 'Ding SEO JSON-LD',
    'page callback' => 'ding_seo_jsonld_ting_object_callback',
    'page arguments' => [3],
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function ding_seo_permission() {
  return [
    'configure seo' => [
      'title' => t('Configure SEO settings'),
      'description' => t('Configure settings of the SEO module'),
    ],
  ];
}

/**
 * Implements hook_xautoload().
 */
function ding_seo_xautoload(LocalDirectoryAdapter $adapter) {
  $adapter->addPsr4('DingSEO', 'src');
}

/**
 * Get provider specific ting object schema wrapper.
 *
 * @param \Ting\TingObjectInterface $ting_object
 *   The ting object to be wrapped.
 *
 * @return \Ting\TingObjectSchemaWrapperInterface|NULL
 *   provider specific ting object schema wrapper. NULL if search provider
 *   doesn't implement or the wrapper didn't implement required interface.
 */
function ding_seo_get_ting_object_schema_wrapper(TingObjectInterface $ting_object) {
  if (ding_provider_implements('search', 'ting_object_schema_wrapper')) {
    $schema_wrapper = ding_provider_invoke('search', 'ting_object_schema_wrapper', $ting_object);

    if ($schema_wrapper instanceof TingObjectSchemaWrapperInterface) {
      return $schema_wrapper;
    }
  }
  return NULL;
}

/**
 * Implements hook_ding_entity_view().
 */
function ding_seo_ding_entity_view($ting_object, $view_mode) {
  if ($view_mode == 'full' || $view_mode == 'collection_list') {
    ding_seo_check_object_for_sitemap($ting_object);
  }

  // Only proceed if this is the main page of the ting object.
  $ting_object_path = entity_uri('ting_object', $ting_object)['path'];
  if ($view_mode != 'full' || current_path() != $ting_object_path) {
    return;
  }

  /** @var \Ting\TingObjectInterface */
  $ting_object = $ting_object->getTingObject();

  // Get the wrapper to check if a schema type can be determined.
  $schema_wrapper = ding_seo_get_ting_object_schema_wrapper($ting_object);
  if (!isset($schema_wrapper) || !$schema_wrapper->getSchemaType()) {
    return;
  }

  drupal_add_js(drupal_get_path('module', 'ding_seo') . '/ding_seo.js', [
    'scope' => 'footer'
  ]);
  drupal_add_js([
    'dingSeo' => [
      'tingObjectId' => $ting_object->getId(),
    ],
  ],'setting');
}

/**
 * Callback for async JSON-LD for ting objects.
 */
function ding_seo_jsonld_ting_object_callback($ting_object_id) {
  $schema_wrapper = NULL;
  // Load the ting object directly since we're wrapping the ting object and not
  // the ting entity, so might as well safe some time by not going through
  // entity API.
  /** @var \Ting\TingObjectInterface */
  $ting_object = ting_search_object_load($ting_object_id);
  if (isset($ting_object)) {
    /** @var DingSEO\TingObjectSchemaWrapperInterface */
    $schema_wrapper = ding_seo_get_ting_object_schema_wrapper($ting_object);
  }

  // Bail out if we were not able to produce a schema wrapper or the schema
  // type could not be determined.
  $schema_type = NULL;
  if (!isset($schema_wrapper) || !$schema_type = $schema_wrapper->getSchemaType()) {
    drupal_add_http_header('Status', '404 Not Found');
    drupal_exit();
  }

  // Common properties.
  $node = [
    '@type' => $schema_type,
    'name' => $schema_wrapper->getName(),
    'description' => $schema_wrapper->getDescription(),
  ];
  if ($image_url = $schema_wrapper->getImageURL()) {
    $node['image'] = [
      '@type' => 'ImageObject',
      'representativeOfPage' => 'True',
      'url' => $image_url,
    ];

    // Add optional image dimensions.
    if ($image_dimensions = $schema_wrapper->getImageDimensions()) {
      $node['image'] += [
        'width' => "$image_dimensions[0]",
        'height' => "$image_dimensions[1]",
      ];
    }
  }

  switch ($schema_type) {
    case TingObjectSchemaWrapperInterface::SCHEMA_BOOK:
      $authors = $schema_wrapper->getAuthors();
      $node += [
        '@id' => $schema_wrapper->getCollectionURL(),
        'url' => $schema_wrapper->getCollectionURL(),
        'author' => ding_seo_get_person_nodes($authors),
      ];

      foreach ($schema_wrapper->getWorkExamples() as $work_example_wrapper) {
        $work_example = [
          '@type' => $schema_type,
          '@id' => $work_example_wrapper->getObjectURL(),
          'url' => $work_example_wrapper->getObjectURL(),
          'name' => $work_example_wrapper->getName(),
          'bookEdition' => $work_example_wrapper->getBookEdition(),
          'datePublished' => $work_example_wrapper->getDatePublished(),
          'isbn' => $work_example_wrapper->getISBN(),
          'bookFormat' => $work_example_wrapper->getBookFormat(),
        ];

        $work_example_authors = $work_example_wrapper->getAuthors();
        // Only include author information if it's different than the
        // information on the top level Book entity.
        if ($work_example_authors != $authors) {
          $work_example['author'] = ding_seo_get_person_nodes($work_example_authors);
        }

        if ($work_example_wrapper->hasBorrowAction()) {
          $work_example['potentialAction'] = ding_seo_generate_borrow_action($work_example_wrapper);
        }

        if ($same_as_url = $work_example_wrapper->getSameAs()) {
          $work_example['sameAs'] = $same_as_url;
        }

        // Filter out any empty fields before adding to node.
        $node['workExample'][] = array_filter($work_example);
      }

      break;
    case TingObjectSchemaWrapperInterface::SCHEMA_MOVIE:
      $node += [
        '@id' => $schema_wrapper->getObjectURL(),
        'url' => $schema_wrapper->getObjectURL(),
        'duration' => $schema_wrapper->getDuration(),
        'datePublished' => $schema_wrapper->getDatePublished(),
        'actor' => ding_seo_get_person_nodes($schema_wrapper->getActors()),
        'director' => ding_seo_get_person_nodes($schema_wrapper->getDirectors()),
        'musicBy' => ding_seo_get_person_nodes($schema_wrapper->getComposers()),
        'producer' => ding_seo_get_person_nodes($schema_wrapper->getProducers()),
      ];

      if ($schema_wrapper->hasBorrowAction()) {
        $node['potentialAction'] = ding_seo_generate_borrow_action($schema_wrapper);
      }

      if ($same_as_url = $schema_wrapper->getSameAs()) {
        $node['sameAs'] = $same_as_url;
      }
      break;
  }

  // Filter out any empty fields.
  $node = array_filter($node);
  $jsonld = [
    '@context' => 'https://schema.org',
    '@graph' => [ $node ],
  ];
  $jsonld = SchemaMetatagManager::encodeJsonld($jsonld);
  $jsonld = SchemaMetatagManager::renderArrayJsonLd($jsonld);
  print drupal_render($jsonld);
  drupal_exit();
}

/**
 * Generate array of person nodes.
 *
 * @param string[] $names
 *   The array of names to use in person nodes.
 *
 * @return array
 *   An array of person nodes (arrays).
 */
function ding_seo_get_person_nodes(array $names) {
  return array_map(function ($name) {
    return [
      '@type' => 'Person',
      'name' => $name,
    ];
  }, $names);
}

/**
 * Generate borrow action.
 *
 * @param TingObjectSchemaWrapperInterface $schema_wrapper
 *   The wrapped ting_object to generate borrow action for.
 *
 * @return array
 *   Array describing borrow action.
 */
function ding_seo_generate_borrow_action(TingObjectSchemaWrapperInterface $schema_wrapper) {
  return [
    '@type' => 'BorrowAction',
    'lender' => [
      '@type' => 'Library',
      '@id' => $schema_wrapper->getLenderLibraryId(),
    ],
    'target' => [
      '@type' => 'EntryPoint',
      'urlTemplate' => $schema_wrapper->getBorrowActionTargetUrl(),
      'actionPlatform' => $schema_wrapper->getBorrowActionTargetPlatform(),
    ],
  ];
}

/**
 * Get all library nodes.
 *
 * @return array
 */
function ding_seo_get_library_nodes() {
  $query = new \EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'ding_library')
    ->execute();

  $library_nodes = [];
  if (isset($result['node'])) {
    $library_nodes_nids = array_keys($result['node']);
    $library_nodes = entity_load('node', $library_nodes_nids);
  }

  return $library_nodes;
}

/**
 * Implements hook_cron().
 *
 * Updates the xmlsitemaptable with new links once a day
 */
function ding_seo_cron() {
  $last_run = variable_get('ding_seo_last_run_sitemap', 0);
  // Run once every day.
  if (REQUEST_TIME > $last_run + 86400) {
    ding_seo_update_sitemap();
    variable_set('ding_seo_last_run_sitemap', REQUEST_TIME);
  }
}

/**
 * Implements hook_xmlsitemap_link_info().
 */
function ding_seo_xmlsitemap_link_info() {
  return [
    'ting_object' => [
      'label' => t('Ting objects'),
    ],
  ];
}

/**
 * Updates the xmlsitemaptable with new links.
 */
function ding_seo_update_sitemap() {
  try {
    ding_seo_check_sitemap_size();
    $last_check = variable_get('ding_seo_sitemap_last_check', 0);
    $objects = ding_seo_get_objects($last_check);

    if (count($objects) > 0) {
      ding_seo_update_sitemap_table($objects);
      variable_set('xmlsitemap_regenerate_needed', TRUE);
      variable_set('ding_seo_sitemap_last_check', time());
    }
    watchdog('ding_seo', 'Updated sitemap: %time', array('%time' => REQUEST_TIME), WATCHDOG_INFO);
  } catch (Exception $exception) {
    watchdog_exception('ding_seo', $exception);
  }
}

/**
 * Get the new links from last update.
 */
function ding_seo_get_objects($last_check) {
  $objects = [];

  $query = db_select('ting_object_sitemap', 't')
    ->condition('t.created', $last_check , '>')
    ->fields('t', ['tid', 'ting_object_id'])
    ->execute();

  while ($value = $query->fetchAssoc()) {
    $tid = $value['tid'];
    $objects[$tid ] = $value['ting_object_id'];
  }

  return $objects;
}

/**
 * Insert the new links into xmlsitemaptable.
 */
function ding_seo_update_sitemap_table($objects) {
  $maxid = (int) db_query("SELECT max(id) FROM {xmlsitemap} WHERE type = 'ting_object'")->fetchField() ?: 0;
  $chunks = array_chunk($objects, 1000, TRUE);
  foreach ($chunks as $chunk) {
    // We could use xmlsitemap_link_save but it takes only one link at a time. For performance reasons
    // we update the database table our selves.
    $query = db_insert('xmlsitemap')->fields(array('id', 'type', 'loc', 'language', 'priority'));
    foreach ($chunk as $id => $object) {
      //If our id isn't the largest somthings wrong.
      if ($id > $maxid) {
        $query->values(
          [
            'id' => $id,
            'type' => 'ting_object',
            'loc' => 'ting/object/' . $object,
            'language' => 'und',
            'priority' => 0.5,
          ]
        );
      }
    }
    $query->execute();
  }
}

/**
 * Checks wether to put the ting_object into a sitemaps.
 *
 *  We only want ting_objects from the Library's own collection.
 *  And we only want the ones the users have viewed as object or collection.
 */
function ding_seo_check_object_for_sitemap($ting_object) {
  if ($ting_object->is('library_material')) {
    try {
      db_merge('ting_object_sitemap')
        ->insertFields([
          'ting_object_id' => $ting_object->getId(),
          'created' => time(),
          'changed' => time(),
        ])
        ->updateFields([
          'changed' => time(),
        ])
        ->key(['ting_object_id' => $ting_object->getId()])
        ->execute();
    } catch (Exception $exception) {
      watchdog_exception('ding_seo', $exception);
    }
  }
}

/**
 * Check if our ting_object_sitemap table exceedes the maximum number of link.
 *
 * We trim the links which haven't been visited for the longest time.
 */
function ding_seo_check_sitemap_size() {
  $max_size = variable_get('ding_seo_maximum_links_in_sitemap', DING_SEO_DEFAULT_MAXIMUM_SITEMAP_LINKS);
  $size = (int) db_query("SELECT count(*) FROM {ting_object_sitemap}")->fetchField() ?: 0;

  if ($size > $max_size) {
    $number_to_delete = $size - $max_size;
    $objects = ding_seo_get_objects_to_delete($number_to_delete);
    ding_seo_delete_from_table_xmlsitemap($objects);
    ding_seo_delete_from_sitemap_table($objects);
  }
}

/**
 * Get the old links to delete.
 */
function ding_seo_get_objects_to_delete($number_to_delete) {
  $objects = [];

  $query = db_select('ting_object_sitemap', 't')
    ->fields('t', ['tid'])
    ->range(0, $number_to_delete)
    ->orderBy('t.changed', 'ASC')
    ->execute();

  while ($value = $query->fetchAssoc()) {
    $objects[] = $value['tid'];
  }
  return $objects;
}

/**
 * Delete old links from xmlsitemaptable.
 */
function ding_seo_delete_from_table_xmlsitemap($objects) {
  foreach ($objects as $tid) {
    $query = db_delete('xmlsitemap');
    $query->condition('id', $tid);
    $query->condition('type', 'ting_object');
    $query->execute();
  }
}

/**
 * Delete old links from ting_object_sitemap table.
 */
function ding_seo_delete_from_sitemap_table($objects) {
  foreach ($objects as $tid) {
    $query = db_delete('ting_object_sitemap');
    $query->condition('tid', $tid);
    $query->execute();
  }
}
