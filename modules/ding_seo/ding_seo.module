<?php

/**
 * @file
 * Ding SEO module file.
 */

use Drupal\xautoload\Adapter\LocalDirectoryAdapter;
use DingSEO\TingObjectSchemaWrapperInterface;
use Ting\TingObjectInterface;

/**
 * Implements hook_menu().
 */
function ding_seo_menu() {
  $items = [];

  $items['admin/config/ding/ding_seo'] = [
    'title' => 'Ding SEO',
    'description' => 'Configure the SEO module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_seo_admin_settings'],
    'access arguments' => ['configure seo settings'],
    'file' => 'ding_seo.admin.inc',
  ];

  $items['ding_seo/jsonld/ting_object/%'] = [
    'title' => 'Ding SEO JSON-LD',
    'page callback' => 'ding_seo_jsonld_ting_object_callback',
    'page arguments' => [3],
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function ding_seo_permission() {
  return [
    'configure seo' => [
      'title' => t('Configure SEO settings'),
      'description' => t('Configure settings of the SEO module'),
    ],
  ];
}

/**
 * Implements hook_xautoload().
 */
function ding_seo_xautoload(LocalDirectoryAdapter $adapter) {
  $adapter->addPsr4('DingSEO', 'src');
}

/**
 * Get provider specific ting object schema wrapper.
 *
 * @param \Ting\TingObjectInterface $ting_object
 *   The ting object to be wrapped.
 *
 * @return \Ting\TingObjectSchemaWrapperInterface|NULL
 *   provider specific ting object schema wrapper. NULL if search provider
 *   doesn't implement or the wrapper didn't implement required interface.
 */
function ding_seo_get_ting_object_schema_wrapper(TingObjectInterface $ting_object) {
  if (ding_provider_implements('search', 'ting_object_schema_wrapper')) {
    $schema_wrapper = ding_provider_invoke('search', 'ting_object_schema_wrapper', $ting_object);

    if ($schema_wrapper instanceof TingObjectSchemaWrapperInterface) {
      return $schema_wrapper;
    }
  }
  return NULL;
}

/**
 * Implements hook_ding_entity_view().
 */
function ding_seo_ding_entity_view($ting_object, $view_mode) {
  // Only proceed if this is the main page of the ting object.
  $ting_object_path = entity_uri('ting_object', $ting_object)['path'];
  if ($view_mode != 'full' || current_path() != $ting_object_path) {
    return;
  }

  /** @var \Ting\TingObjectInterface */
  $ting_object = $ting_object->getTingObject();

  // Get the wrapper to check if a schema type can be determined.
  $schema_wrapper = ding_seo_get_ting_object_schema_wrapper($ting_object);
  if (!isset($schema_wrapper) || !$schema_wrapper->getSchemaType()) {
    return;
  }

  drupal_add_js(drupal_get_path('module', 'ding_seo') . '/ding_seo.js', [
    'scope' => 'footer'
  ]);
  drupal_add_js([
    'dingSeo' => [
      'tingObjectId' => $ting_object->getId(),
    ],
  ],'setting');
}

/**
 * Callback for async JSON-LD for ting objects.
 */
function ding_seo_jsonld_ting_object_callback($ting_object_id) {
  $schema_wrapper = NULL;
  // Load the ting object directly since we're wrapping the ting object and not
  // the ting entity, so might as well safe some time by not going through
  // entity API.
  /** @var \Ting\TingObjectInterface */
  $ting_object = ting_search_object_load($ting_object_id);
  if (isset($ting_object)) {
    /** @var DingSEO\TingObjectSchemaWrapperInterface */
    $schema_wrapper = ding_seo_get_ting_object_schema_wrapper($ting_object);
  }

  // Bail out if we were not able to produce a schema wrapper or the schema
  // type could not be determined.
  $schema_type = NULL;
  if (!isset($schema_wrapper) || !$schema_type = $schema_wrapper->getSchemaType()) {
    print '';
    drupal_exit();
  }

  // Common properties.
  $node = [
    '@type' => $schema_type,
    'name' => $schema_wrapper->getName(),
    'description' => $schema_wrapper->getDescription(),
  ];
  if ($image_url = $schema_wrapper->getImageURL()) {
    $node['image'] = [
      '@type' => 'ImageObject',
      'representativeOfPage' => 'True',
      'url' => $image_url,
    ];

    // TODO: Find out if it's ok to omit dimensions or we should just ditch
    // it all together if not found. We know there's a cover, but it might
    // not be fecthed yet so we can check dimensions.
    if ($image_dimensions = $schema_wrapper->getImageDimensions()) {
      $node['image'] += [
        'width' => "$image_dimensions[0]",
        'height' => "$image_dimensions[1]",
      ];
    }
  }

  switch ($schema_type) {
    case 'Book':
      $authors = $schema_wrapper->getAuthors();
      $node += [
        '@id' => $schema_wrapper->getCollectionURL(),
        'url' => $schema_wrapper->getCollectionURL(),
        'author' => ding_seo_get_person_nodes($authors),
      ];

      foreach ($schema_wrapper->getWorkExamples() as $work_example_wrapper) {
        $work_example = [
          '@type' => 'Book',
          '@id' => $work_example_wrapper->getObjectURL(),
          'url' => $work_example_wrapper->getObjectURL(),
          'name' => $work_example_wrapper->getName(),
          'bookEdition' => $work_example_wrapper->getBookEdition(),
          'datePublished' => $work_example_wrapper->getDatePublished(),
          'isbn' => $work_example_wrapper->getISBN(),
          'bookFormat' => $work_example_wrapper->getBookFormat(),
        ];

        $work_example_authors = $work_example_wrapper->getAuthors();
        // Only include author information if it's different than the
        // information on the top level Book entity.
        if ($work_example_authors != $authors) {
          $work_example['author'] = ding_seo_get_person_nodes($work_example_authors);
        }
        // Filter out any empty fields before adding to node.
        $node['workExample'][] = array_filter($work_example);
      }
      break;
    case 'Movie':
      $node += [
        '@id' => $schema_wrapper->getObjectURL(),
        'url' => $schema_wrapper->getObjectURL(),
        'duration' => $schema_wrapper->getDuration(),
        'datePublished' => $schema_wrapper->getDatePublished(),
        'actor' => ding_seo_get_person_nodes($schema_wrapper->getActors()),
        'director' => ding_seo_get_person_nodes($schema_wrapper->getDirectors()),
        'musicBy' => ding_seo_get_person_nodes($schema_wrapper->getComposers()),
        'producer' => ding_seo_get_person_nodes($schema_wrapper->getProducers()),
      ];
      break;
  }

  // Filter out any empty fields.
  $node = array_filter($node);
  $jsonld = [
    '@context' => 'https://schema.org',
    '@graph' => [ $node ],
  ];
  $jsonld = SchemaMetatagManager::encodeJsonld($jsonld);
  $jsonld = SchemaMetatagManager::renderArrayJsonLd($jsonld);
  print drupal_render($jsonld);
  drupal_exit();
}

/**
 * Generate array of person nodes.
 *
 * @param string[] $names
 *   The array of names to use in person nodes.
 *
 * @return array[]
 *   An array of person nodes (arrays).
 */
function ding_seo_get_person_nodes(array $names) {
  return array_map(function ($name) {
    return [
      '@type' => 'Person',
      'name' => $name,
    ];
  }, $names);
}
